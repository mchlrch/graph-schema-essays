PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX sh: <http://www.w3.org/ns/shacl#>
PREFIX dcat:	<http://www.w3.org/ns/dcat#>
PREFIX dct:	<http://purl.org/dc/terms/>
PREFIX prof:	<http://www.w3.org/ns/dx/prof/>
PREFIX role: <http://www.w3.org/ns/dx/prof/role/>
PREFIX string: <http://www.w3.org/2000/10/swap/string#>
PREFIX log: <http://www.w3.org/2000/10/swap/log#>
PREFIX : <http://schema.example.org/pgs/>
PREFIX gen: <http://schema.example.org/pgs-genmodel/>
PREFIX g: <http://schema.example.org/graph/>

# Having this PREFIX declared here makes the generated 'out-profile.ttl' file more readable.
# But it doesn't belong here, as it depends on the input data.
PREFIX socialgraph: <http://schema.example.org/socialgraph/>


#
# Create IRIs for the Profile and ResourceDescriptor
# 
{
  ?graphType a :GraphType ;
    :name ?graphTypeName ;
    :namespace ?ns .

  (?ns "profile/" ?graphTypeName) string:concatenation ?profileIriString .
  (?ns "resource-descriptor/" ?graphTypeName) string:concatenation ?resourceDescriptorIriString .

  ?profile log:uri ?profileIriString .
  ?resourceDescriptor log:uri ?resourceDescriptorIriString .
}
=>
{
    ?graphType gen:profile ?profile ;
      gen:resourceDescriptor ?resourceDescriptor .
} .



#
# Declare the Profile and ResourceDescriptor
#
{
  ?graphType a :GraphType ;
    gen:profile ?profile ;
    gen:resourceDescriptor ?resourceDescriptor .
}
=>
{
  ?profile a prof:Profile ;
    prof:hasResource ?resourceDescriptor .
    
  ?resourceDescriptor a prof:ResourceDescriptor ;
    dct:conformsTo <https://www.w3.org/TR/shacl/> ;
    prof:hasRole role:Validation .
} .



# ------------------------------------------------------
#
# Create IRI for the NodeType
# 
{
  ?graphType a :GraphType ;
    :namespace ?ns .

  ?nodeType a :NodeType ;
    :name ?nodeTypeName ;
    :isPartOf ?graphType .

  (?ns ?nodeTypeName) string:concatenation ?nTypeIriString .

  ?nType log:uri ?nTypeIriString .
}
=>
{
    ?nodeType gen:iri ?nType .
} .


#
# Declare the NodeType (synthetic Class & NodeShape)
# 
{
  ?nodeType a :NodeType ;
    gen:iri ?nType .
  
  ?nodeType!:isPartOf gen:resourceDescriptor ?resourceDescriptor .
}
=>
{
    ?nType a g:NodeType, rdfs:Class, sh:NodeShape .
    ?nType rdfs:isDefinedBy ?resourceDescriptor .
} .

# ------------------------------------------------------
#
# Pre-Cook required labels. case:re-used existing labels
#
{
  ?nodeType a :NodeType ;
    :hasRequiredLabel ?nodeLabel .

  [] log:notIncludes { ?nodeLabel a :NodeLabel } .
}
=>
{
  ?nodeType gen:requiredLabel ?nodeLabel .
} .


#
# Pre-Cook required labels. case:local labels
#
{
  ?nodeType a :NodeType ;
    :isPartOf ?graphType ;
    :hasRequiredLabel ?nodeLabel .

  ?nodeLabel a :NodeLabel ;
    :name ?nodeLabelName .

  # for now, only consider nodeLabels that are part of the same graphType
  ?nodeLabel :isPartOf ?graphType .
   
  ?graphType a :GraphType ;
    :namespace ?ns .

  (?ns ?nodeLabelName) string:concatenation ?nLabelIriString .

  ?nLabel log:uri ?nLabelIriString .
}
=>
{
  ?nodeLabel gen:iri ?nLabel .
  ?nodeType gen:requiredLabel ?nLabel .
} .


#
# Declare local labels
# 
{
  ?nodeType a :NodeType ;
    :hasRequiredLabel ?nodeLabel .

  ?nodeLabel a :NodeLabel ;
    gen:iri ?nLabel .

  ?nodeType!:isPartOf gen:resourceDescriptor ?resourceDescriptor .
}
=>
{
    ?nLabel a rdfs:Class .
    ?nLabel rdfs:isDefinedBy ?resourceDescriptor .
} .


#
# Transform required labels
#
{
  ?nodeType a :NodeType ;
    gen:iri ?nType ;
    gen:requiredLabel ?nLabel .
}
=>
{
  ?nType sh:property [
	  sh:path rdf:type ;
	  sh:hasValue ?nLabel
	] .
} .


# ------------------------------------------------------
#
# Pre-Cook required properties. case:re-used existing properties
#
{
  ?nodeType a :NodeType ;
    :hasRequiredProperty [
      :rdfProperty ?rdfProperty ;
      :rdfDatatype ?rdfDatatype
    ] .
}
=>
{
  ?nodeType gen:requiredProperty [
    gen:rdfProperty ?rdfProperty ;
    gen:rdfDatatype ?rdfDatatype
  ] .
} .


#
# Pre-Cook required properties. case:local properties
#
{
  ?nodeType a :NodeType ;
    :isPartOf ?graphType ;
    :hasRequiredProperty ?prop .

  ?prop :pgProperty ?pgProperty ;
    :rdfDatatype ?rdfDatatype .

  ?pgProperty a :Property ;
    :name ?pgPropertyName .

  # for now, only consider PG-Properties that are part of the same graphType
  ?pgProperty :isPartOf ?graphType .
   
  ?graphType a :GraphType ;
    :namespace ?ns .

  (?ns ?pgPropertyName) string:concatenation ?rdfPropertyIriString .

  ?rdfProperty log:uri ?rdfPropertyIriString .
}
=>
{
  ?prop gen:iri ?rdfProperty .
  
  ?nodeType gen:requiredProperty [
    gen:rdfProperty ?rdfProperty ;
    gen:rdfDatatype ?rdfDatatype
  ] .
} .


#
# Declare local properties
# 
{
  ?nodeType a :NodeType ;
    :hasRequiredProperty ?prop .
  
  ?prop gen:iri ?rdfProperty .

  ?nodeType!:isPartOf gen:resourceDescriptor ?resourceDescriptor .
}
=>
{
  ?rdfProperty a rdf:Property .
  ?rdfProperty rdfs:isDefinedBy ?resourceDescriptor .
} .


#
# Transform required properties
#
{
  ?nodeType a :NodeType ;
    gen:iri ?nType ;
    gen:requiredProperty [
      gen:rdfProperty ?rdfProperty ;
      gen:rdfDatatype ?rdfDatatype
    ] .
}
=>
{
  ?nType sh:property [
	  sh:path ?rdfProperty ;
	  sh:datatype ?rdfDatatype ;
    sh:minCount 1 ;
    sh:maxCount 1 ;
	] .
} .


# ------------------------------------------------------
#
#
#